#!groovy

@Library("Infrastructure")

def type = "java"
def product = "ucmc"
def component = "service"

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def otherSecrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN')
  ]
]

def archiveCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin") {
    sh "./build-release-ccd-definition.sh ${env}"
  }

  dir("${WORKSPACE}/build") {
    steps.archiveArtifacts artifacts: "ccd-release-config/ccd-ucmc-${env}.xlsx"
  }
}

/**
 * Imports CCD definitions into specified environment. Import XLSX file is archived when process completed.
 *
 * NOTE: It requires `bin/variables/load-${env}-environment-variables.sh` file to define environment specific URLs.
 *
 * @param env target environment
 */
def uploadCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin"){
    ccdDefinitionFilePath="${WORKSPACE}/build/ccd-release-config/ccd-ucmc-${env}.xlsx"
    sh """
    eval \$(./variables/load-${env}-environment-variables.sh)
    ${WORKSPACE}/civil-unspecified-docker/bin/utils/ccd-import-definition.sh ${ccdDefinitionFilePath}
  """
  }
}

withPipeline(type, product, component) {
  disableLegacyDeployment()

  enableAksStagingDeployment()
  enableSlackNotifications('#ucmc_notification')

  onPR {
    loadVaultSecrets(otherSecrets)
  }

  after('checkout') {
    sh """ git submodule update --init """
  }

  before('smoketest:preview') {
    archiveCoreCaseDataDefinitions('preview')
    uploadCoreCaseDataDefinitions('preview')
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('smoketest:demo') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

}
