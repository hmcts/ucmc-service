#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig

def type = "java"
def product = "unspec"
def component = "service"
AppPipelineConfig pipelineConf;

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def otherSecrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN')
  ],
  'unspec-${env}': [
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD')
  ]
]

def archiveCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin") {
    sh "./build-release-ccd-definition.sh ${env}"
  }

  dir("${WORKSPACE}/build") {
    steps.archiveArtifacts artifacts: "ccd-release-config/ccd-unspec-${env}.xlsx"
  }
}

def uploadCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin"){
    ccdDefinitionFilePath="${WORKSPACE}/build/ccd-release-config/ccd-unspec-${env}.xlsx"
    sh """
    eval \$(./variables/load-${env}-environment-variables.sh)
    ${WORKSPACE}/civil-unspecified-docker/bin/utils/ccd-import-definition.sh ${ccdDefinitionFilePath}
  """
  }
}

withPipeline(type, product, component) {
  pipelineConf = config;
  disableLegacyDeployment()
  enableAksStagingDeployment()
  enableSlackNotifications('#unspec_notification')

  onPR {
    loadVaultSecrets(otherSecrets)
  }
  onMaster {
    loadVaultSecrets(otherSecrets)
  }
  onDemo {
    loadVaultSecrets(serviceSecrets + otherSecrets)
  }

  after('checkout') {
    onMaster {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
        try {
          sh '''
            set -e

            git remote set-url origin $(git config remote.origin.url | sed "s/github.com/${BEARER_TOKEN}@github.com/g")

            git fetch origin demo:demo
            git push --force origin HEAD:demo
          '''
        } catch (err) {
          notifyBuildEvent channel: '#unspec_notification', color: 'warning', message: 'Failed to update demo branch'
        }
      }
    }
    sh """ git submodule update --init """
  }

  before('smoketest:preview') {
    sh """
      eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
      ./bin/add-roles-preview.sh
      ./bin/import-ccd-definition.sh
    """

    env.URL="https://xui-unspec-service-pr-${CHANGE_ID}.service.core-compute-preview.internal"
  }

  after('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  after('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('smoketest:aat') {
    env.URL = "https://manage-case.aat.platform.hmcts.net"
    archiveCoreCaseDataDefinitions('aat')
    uploadCoreCaseDataDefinitions('aat')
  }

  after('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:aat') {
    env.SKIP_FUNCTIONAL_TESTS = 'true'
  }

  before('buildinfra:demo') {
    def subscription = 'nonprod'
    withSubscription(subscription) {
      withTeamSecrets(pipelineConf, 'demo') {
        archiveCoreCaseDataDefinitions('demo')
        uploadCoreCaseDataDefinitions('demo')
      }
    }
  }

  after('smoketest:demo') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }
}
