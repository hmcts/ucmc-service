plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.10.RELEASE'
  id 'org.springframework.boot' version '2.3.3.RELEASE'
  id 'org.owasp.dependencycheck' version '5.3.2.1'
  id 'com.github.ben-manes.versions' version '0.33.0'
  id 'org.sonarqube' version '3.0'
  id 'au.com.dius.pact' version '4.1.7'
  id "io.freefair.lombok" version "5.2.1"
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
  testLogging.showStandardStreams = false
}

task contract(type: Test) {
  useJUnitPlatform()
  description = "Runs pact contract tests"
  group = "Verification"
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task installDependencies(type: Exec, description: 'Installs Yarn dependencies.') {
  commandLine '/usr/bin/yarn', '--mutex', 'network', '--frozen-lockfile', '--silent', 'install'
}

task checkDependenciesIntegrity(type: Exec, description: 'Checks integrity of Yarn dependencies.') {
  commandLine '/usr/bin/yarn', '--mutex', 'network', '--frozen-lockfile', '--silent', 'check', '--integrity'
}

task lintUserInterfaceTests(type: Exec, description: 'Runs linting of E2E tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'lint'
}

task awaitApplicationReadiness(type: Exec, description: 'Awaits until application is ready.') {
  commandLine './bin/wait-for.sh', System.env.URL
}

task runSmokeTests(type: Exec, description: 'Runs smoke tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'test:smoke'
}

task runFunctionalTests(type: Exec, description: 'Runs functional tests.') {
  onlyIf(new Spec<Task>() {
    boolean isSatisfiedBy(Task task) {
      String skipTestsEnvironmentVariable = System.env.SKIP_FUNCTIONAL_TESTS
      return skipTestsEnvironmentVariable == null || skipTestsEnvironmentVariable == 'false'
    }
  })
  commandLine '/usr/bin/yarn', '--silent', 'test:functional'
}

def inStrictOrder(Task... tasks) {
  for (int i = 0; i < tasks.size() - 1; i++) {
    tasks[i + 1].mustRunAfter(tasks[i])
  }
  return tasks
}

task smoke(description: 'Runs the smoke tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, installDependencies, checkDependenciesIntegrity, lintUserInterfaceTests, runSmokeTests))
}

task functional(description: 'Runs the functional tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, installDependencies, checkDependenciesIntegrity, lintUserInterfaceTests, runFunctionalTests))
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "UNSPEC :: service"
    property "sonar.projectKey", "unspec-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.coverage.exclusions", "**/model/**, **/config/**/*Configuration.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.66'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '29.0-jre') {
      entry 'guava'
    }
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
  maven {
    url  "http://repo.spring.io/milestone"
  }
  maven {
    url  "https://repo.spring.io/libs-milestone"
  }
}

def versions = [
  junit              : '5.7.0',
  junitPlatform      : '1.7.0',
  reformLogging      : '5.1.5',
  springBoot         : springBoot.class.package.implementationVersion,
  springStatemachine : '3.0.0.M2',
  springfoxSwagger   : '2.9.2',
  lombok             : '1.18.12',
  pact               : '3.5.24',
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'

  implementation group: 'org.springframework.statemachine', name: 'spring-statemachine-core', version: versions.springStatemachine

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.16'
  implementation group: 'org.jdbi', name: 'jdbi3-sqlobject', version: '3.14.4'
  implementation group: 'org.jdbi', name: 'jdbi3-spring4', version: '3.14.4'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: '6.5.5'

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.5.RELEASE'
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'

  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.0'
  implementation group: 'org.springframework.retry', name: 'spring-retry'

  implementation group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.7.3'
  implementation group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '7.0.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'fees-java-client', version: '0.0.6'
  implementation group: 'uk.gov.hmcts.reform', name: 'payments-client', version: '1.0.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'


  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.7.0'

  implementation group: 'org.springframework.security', name: 'spring-security-web'
  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '8.20'
  implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '1.5.5'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.13.3'

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.38'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.38'

  implementation group: 'org.elasticsearch', name: 'elasticsearch', version: '7.9.1'

  implementation group: 'org.camunda.bpm', name: 'camunda-external-task-client', version: '1.3.1'
  implementation group: 'org.camunda.bpm.extension.rest', name: 'camunda-rest-client-spring-boot-starter', version: '0.0.4'
  implementation group: 'org.camunda.bpm', name: 'camunda-engine-rest-core', version: '7.13.0'
  implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.11.2'

  testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.5.10'
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.5.10'

  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation 'org.mockito:mockito-inline:3.5.10'

  testImplementation group: 'io.rest-assured', name: 'rest-assured'

  testCompile group: 'org.springframework.statemachine', name: 'spring-statemachine-test', version: versions.springStatemachine

  //pact contract testing
  contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact
  contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact

  contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.7.0")
  contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.7.0")
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')

  contractTestCompile sourceSets.main.runtimeClasspath
  contractTestCompile sourceSets.test.runtimeClasspath

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.unspec.Application'

bootJar {
  getArchiveFileName().set(provider {
    'unspec-service.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

pact {
  publish {
    pactDirectory = 'target/pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pactVersion
  }
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}
