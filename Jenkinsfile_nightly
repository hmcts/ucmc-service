#!groovy

properties([
  pipelineTriggers([cron('H 05 * * *')]),
  parameters([
    string(name: 'FRONTEND_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net',
      description: 'The URL you want to run the full functional tests against'),
    string(name: 'CASE_SERVICE_URL', defaultValue: 'http://unspec-service-aat.service.core-compute-aat.internal',
      description: 'The URL of case service callbacks'),
    string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net',
      description: 'The URL of idam api'),
    string(name: 'DM_STORE_URL', defaultValue: 'http://dm-store-aat.service.core-compute-aat.internal',
      description: 'The URL of dm store'),
    string(name: 'PROXY_SERVER', defaultValue: 'proxyout.reform.hmcts.net:8080',
      description: 'The proxy server to use'),
    string(name: 'FUNCTIONAL_TESTS_WORKERS',
      defaultValue: '5',
      description: 'Number of workers running functional tests'),
  ])
])

@Library("Infrastructure")

def type = "java"
def product = "unspec"
def component = "service"

//def type = "java"
//def product = "rpe"
//def component = "spring-boot-template"

withNightlyPipeline(type, product, component) {
  env.URL = params.FRONTEND_URL
  env.DM_STORE_URL=params.DM_STORE_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.CASE_SERVICE_URL=params.CASE_SERVICE_URL
  env.PROXY_SERVER = params.PROXY_SERVER

  enableFullFunctionalTest()
  enableSlackNotifications('#rpe-build-notices')
}

before('fullFunctionalTest') {
  env.PROXY = params.PROXY_SERVER
  env.PARALLEL_CHUNKS = params.FUNCTIONAL_TESTS_WORKERS
  env.MOCKED_PAYMENTS = false
  env.TEST_RETRIES = 2
}


after('fullFunctionalTest') {
  archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
}
